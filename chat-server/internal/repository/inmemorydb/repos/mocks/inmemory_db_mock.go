// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package mock_repos is a generated GoMock package.
package mock_repos

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMemoryDB is a mock of AuthDatabase interface.
type MockMemoryDB struct {
	ctrl     *gomock.Controller
	recorder *MockMemoryDBMockRecorder
}

// MockMemoryDBMockRecorder is the mock recorder for MockMemoryDB.
type MockMemoryDBMockRecorder struct {
	mock *MockMemoryDB
}

// NewMockMemoryDB creates a new mock instance.
func NewMockMemoryDB(ctrl *gomock.Controller) *MockMemoryDB {
	mock := &MockMemoryDB{ctrl: ctrl}
	mock.recorder = &MockMemoryDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemoryDB) EXPECT() *MockMemoryDBMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockMemoryDB) Get(key string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockMemoryDBMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMemoryDB)(nil).Get), key)
}

// Insert mocks base method.
func (m *MockMemoryDB) Insert(key string, data interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Insert", key, data)
}

// Insert indicates an expected call of Insert.
func (mr *MockMemoryDBMockRecorder) Insert(key, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockMemoryDB)(nil).Insert), key, data)
}
