// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package mock_repos is a generated GoMock package.
package mock_repos

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockPostgresDB is a mock of AuthPostgresDB interface.
type MockPostgresDB struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresDBMockRecorder
}

// MockPostgresDBMockRecorder is the mock recorder for MockPostgresDB.
type MockPostgresDBMockRecorder struct {
	mock *MockPostgresDB
}

// NewMockPostgresDB creates a new mock instance.
func NewMockPostgresDB(ctrl *gomock.Controller) *MockPostgresDB {
	mock := &MockPostgresDB{ctrl: ctrl}
	mock.recorder = &MockPostgresDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresDB) EXPECT() *MockPostgresDBMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPostgresDB) Get(query string) (*sqlx.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", query)
	ret0, _ := ret[0].(*sqlx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPostgresDBMockRecorder) Get(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPostgresDB)(nil).Get), query)
}

// Insert mocks base method.
func (m *MockPostgresDB) Insert(query string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", query)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockPostgresDBMockRecorder) Insert(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockPostgresDB)(nil).Insert), query)
}
